[buildout]
extends = etc/base.cfg

parts +=
    test
    coverage
    coveragereport
    unittestnodeextdirectory
    unittestnodeextpython

extensions = 
    mr.developer

sources = sources
sources-dir = ${buildout:directory}/devsrc
auto-checkout = *
always-checkout = force

[remotes]
bda = git://github.com/bluedynamics
bda_push = git@github.com:bluedynamics

[sources]
odict                   = git ${remotes:bda}/odict.git                   pushurl=${remotes:bda_push}/odict.git
plumber                 = git ${remotes:bda}/plumber.git                 pushurl=${remotes:bda_push}/plumber.git
node                    = git ${remotes:bda}/node.git                    pushurl=${remotes:bda_push}/node.git
node.ext.python         = git ${remotes:bda}/node.ext.python.git         pushurl=${remotes:bda_push}/node.ext.python.git          branch=artsprint2013
node.ext.template       = git ${remotes:bda}/node.ext.template.git       pushurl=${remotes:bda_push}/node.ext.template.git
node.ext.directory      = git ${remotes:bda}/node.ext.directory.git      pushurl=${remotes:bda_push}/node.ext.directory.git       branch=unittests
node.ext.xml            = git ${remotes:bda}/node.ext.xml.git            pushurl=${remotes:bda_push}/node.ext.xml.git
node.ext.uml            = git ${remotes:bda}/node.ext.uml.git            pushurl=${remotes:bda_push}/node.ext.uml.git
node.ext.zcml           = git ${remotes:bda}/node.ext.zcml.git           pushurl=${remotes:bda_push}/node.ext.zcml.git
node.ext.xmi            = git ${remotes:bda}/node.ext.xmi.git            pushurl=${remotes:bda_push}/node.ext.xmi.git
agx.core                = git ${remotes:bda}/agx.core.git                pushurl=${remotes:bda_push}/agx.core.git
agx.transform.xmi2uml   = git ${remotes:bda}/agx.transform.xmi2uml.git   pushurl=${remotes:bda_push}/agx.transform.xmi2uml.git
agx.transform.uml2fs    = git ${remotes:bda}/agx.transform.uml2fs.git    pushurl=${remotes:bda_push}/agx.transform.uml2fs.git
agx.generator.uml       = git ${remotes:bda}/agx.generator.uml.git       pushurl=${remotes:bda_push}/agx.generator.uml.git
agx.generator.pyegg     = git ${remotes:bda}/agx.generator.pyegg.git     pushurl=${remotes:bda_push}/agx.generator.pyegg.git
agx.generator.zca       = git ${remotes:bda}/agx.generator.zca.git       pushurl=${remotes:bda_push}/agx.generator.zca.git
agx.generator.buildout  = git ${remotes:bda}/agx.generator.buildout.git  pushurl=${remotes:bda_push}/agx.generator.buildout.git
agx.generator.plone     = git ${remotes:bda}/agx.generator.plone.git     pushurl=${remotes:bda_push}/agx.generator.plone.git
agx.generator.dexterity = git ${remotes:bda}/agx.generator.dexterity.git pushurl=${remotes:bda_push}/agx.generator.dexterity.git
agx.generator.sql       = git ${remotes:bda}/agx.generator.sql.git       pushurl=${remotes:bda_push}/agx.generator.sql.git
agx.generator.generator = git ${remotes:bda}/agx.generator.generator.git pushurl=${remotes:bda_push}/agx.generator.generator.git
agx.generator.cornice   = git ${remotes:bda}/agx.generator.cornice.git   pushurl=${remotes:bda_push}/agx.generator.cornice.git

[test]
recipe = zc.recipe.testrunner
eggs =
    odict[test]
    plumber[test]
    node.ext.python[test]
    node.ext.template[test]
    node.ext.directory[test]
    node.ext.xml[test]
    node.ext.uml[test]
    node.ext.zcml[test]
    node.ext.xmi[test]
    agx.transform.xmi2uml[test]
    agx.transform.uml2fs[test]
    agx.generator.uml[test]
    agx.generator.pyegg[test]
    agx.generator.zca[test]
    agx.generator.sql[test]
    agx.generator.plone[test]
    agx.generator.buildout[test]
    agx.generator.dexterity[test]
    agx.generator.generator[test]
    agx.generator.cornice[test]
    agx.core[test]
    node[test]
defaults = ['--auto-color', '--auto-progress']

[unittest]
eggs = 
     src
     devsrc/agx.generator.generator
     devsrc/agx.generator.cornice
     devsrc/agx.generator.sql
     devsrc/agx.generator.dexterity
     devsrc/agx.generator.uml
     devsrc/agx.transform.uml2fs
     devsrc/agx.generator.pyegg
     devsrc/agx.generator.plone
     devsrc/agx.transform.xmi2uml
     devsrc/node.ext.directory
     devsrc/agx.core
     devsrc/node.ext.uml
     devsrc/node.ext.python
     devsrc/node.ext.template
     devsrc/agx.generator.buildout
     devsrc/agx.generator.zca
     devsrc/node.ext.xmi
     devsrc/plumber
     devsrc/node
     devsrc/node.ext.zcml
     devsrc/node.ext.xml
     devsrc/odict
eggssrc = 
     src
     devsrc/agx.generator.generator/src
     devsrc/agx.generator.cornice/src
     devsrc/agx.generator.sql/src
     devsrc/agx.generator.dexterity/src
     devsrc/agx.generator.uml/src
     devsrc/agx.transform.uml2fs/src
     devsrc/agx.generator.pyegg/src
     devsrc/agx.generator.plone/src
     devsrc/agx.transform.xmi2uml/src
     devsrc/node.ext.directory/src
     devsrc/agx.core/src
     devsrc/node.ext.uml/src
     devsrc/node.ext.python/src
     devsrc/node.ext.template/src
     devsrc/agx.generator.buildout/src
     devsrc/agx.generator.zca/src
     devsrc/node.ext.xmi/src
     devsrc/plumber/src
     devsrc/node/src
     devsrc/node.ext.zcml/src
     devsrc/node.ext.xml/src
     devsrc/odict/src
     eggs/
testeggs = 
    odict[test]
    plumber[test]
    node.ext.python[test]
    node.ext.template[test]
    node.ext.directory[test]
    node.ext.xml[test]
    node.ext.uml[test]
    node.ext.zcml[test]
    node.ext.xmi[test]
    agx.transform.xmi2uml[test]
    agx.transform.uml2fs[test]
    agx.generator.uml[test]
    agx.generator.pyegg[test]
    agx.generator.zca[test]
    agx.generator.sql[test]
    agx.generator.plone[test]
    agx.generator.buildout[test]
    agx.generator.dexterity[test]
    agx.generator.generator[test]
    agx.generator.cornice[test]
    agx.core[test]
    node[test]

[nosetesting]
recipe = pbp.recipe.noserunner
script = agxnosetests
defaults =
    --with-coverage
    --with-xunit
    --xunit-file=agxnosetests.xml
extra-paths = ${unittest:eggssrc}

[unittestnodeextpython]
recipe = pbp.recipe.noserunner
script = unittestnodeextpython
eggs = node.ext.python
defaults =
    devsrc/node.ext.python/src
    --with-coverage
    --cover-package node.ext.python
    --with-xunit
    --xunit-file=node.ext.python.xml
extra-paths = ${unittest:eggssrc}

[unittestnodeextdirectory]
recipe = pbp.recipe.noserunner
script = unittestnodeextdirectory
eggs = node.ext.directory
defaults =
    devsrc/node.ext.directory/src
    --with-coverage
    --cover-package node.ext.directory
    --with-xunit
    --xunit-file=node.ext.directory.xml
extra-paths = ${unittest:eggssrc}

[coverage]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    ./bin/test --coverage ../../coverage -v --auto-progress "$@"
output = ${buildout:directory}/bin/coverage
mode = 755

[coveragereport]
recipe = zc.recipe.egg
eggs = z3c.coverage
scripts = coveragereport=coveragereport
arguments = sys.argv[1:] or ['${buildout:directory}/parts/coverage', '${buildout:directory}/parts/coverage/report']
